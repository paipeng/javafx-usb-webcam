
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:6.2.2'
    }
}

plugins {
    id 'java-library'
    id 'application'
}

group 'com.paipeng'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8
mainClassName = 'com.paipeng.javafx.webcam.WebCamApplication'

repositories {
    //mavenCentral()
    maven{url 'https://maven.aliyun.com/nexus/content/repositories/central/'}
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}



javadoc {
    options.addStringOption('encoding', 'UTF-8')
}
compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    api group: 'org.slf4j', name: 'slf4j-api', version: '1.7.22'
    api group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.22'

    // https://mvnrepository.com/artifact/net.java.dev.jna/jna
    api group: 'net.java.dev.jna', name: 'jna', version: '5.9.0'

    api group: 'com.github.sarxos', name: 'webcam-capture', version: '0.3.13-SNAPSHOT'
    api group: 'com.github.sarxos', name: 'webcam-capture-driver-openimaj', version: '0.3.13-SNAPSHOT'

    // https://mvnrepository.com/artifact/javax.usb/usb-api
    api group: 'javax.usb', name: 'usb-api', version: '1.0.2'
    // https://mvnrepository.com/artifact/org.usb4java/usb4java-javax
    api group: 'org.usb4java', name: 'usb4java-javax', version: '1.3.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}


compileJava {
    options.fork = true
    options.forkOptions.executable = "${System.properties['java.home']}/../bin/javac" // assumes that javac is on PATH
    options.compilerArgs << "-XDignore.symbol.file"
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}



project.configurations.implementation.setCanBeResolved(true)
task fatJar(type: Jar) {
    println "my fatjar"
    manifest {
        attributes 'Main-Class' : mainClassName,
                'Class-Path': configurations.implementation.collect {"$it.name"}.join(' ')
    }
    baseName = project.name + '-all'
//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    from {
        configurations.implementation.collect {
            it.isDirectory() ? it : ((it.getName().contains(".dylib"))? it: zipTree(it)) } }

    from ("libs") {
        into ("libs")
    }

    with jar
}


test {
    useJUnitPlatform()
}